name: Build

on:
  push:
    branches: [ "main" ]
    paths:
      - '**.rs'
      - '**.toml'
      - '**.wxs'
      - 'assets/**'
      - '.github/workflows/rust.yml'
  workflow_dispatch:
    inputs: 
      is_release:
        description: 'is this a release?'
        required: false
        default: 'true'
      is_patch:
        description: 'is this a patch release?'
        required: false
        default: 'false'     
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.CV_WORKFLOW_TOKEN }}
      
    - name: Set up cargo cache
      id: cargo_cache
      uses: actions/cache@v3
      continue-on-error: false
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: windows-cargo-
        
    - name: Set up target cache
      id: target_cache
      uses: actions/cache@v3
      continue-on-error: false
      with:
        path: |
          target/
        key: ${{ runner.os }}-target-${{ hashFiles('**/target/**.exe') }}
        enableCrossOsArchive: true
        restore-keys: windows-target-
        
    - name: Install cargo commands
      if: steps.cargo_cache.outputs.cache-hit != 'true'
      continue-on-error: true
      run: | 
        cargo install cargo-wix --verbose || true
        cargo install cargo-bump --verbose || true
        cargo install cargo-get --verbose || true
        
    - name: Get Short SHA
      run: echo "GITHUB_SHA_SHORT=$(git rev-parse --short ${{github.sha}})" >> $env:GITHUB_ENV 

# disable clippy for now, minimum value
#    - name: Clippy
#      run: cargo clippy

    - name: Setup git config values
      run: | 
        git config user.name github-actions
        git config user.email github-actions@github.com
        
    - if: github.event.inputs.is_release == 'true' && github.event.inputs.is_patch == 'false'
      name: Bump minor ver
      run: cargo bump minor
      
    - if: github.event.inputs.is_release == 'true' && github.event.inputs.is_patch == 'true'
      name: Bump patch ver
      run: cargo bump patch
      
    - if: github.event.inputs.is_release == 'true'
      name: Commit version bump
      run: |
        git commit -am "bumped version"
        git push
      
    - name: Build Debug
      run: cargo build --verbose
      
    - name: Build Release
      run: cargo build --release --verbose
        
    - name: Build wix
      run: cargo wix --verbose
      
    - name: Run tests
      run: cargo test --verbose
      
    - name: Get version
      run: echo "CV_VERSION=$(cargo get version)" >> $env:GITHUB_ENV
      
    - name: Binaries Artifact
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: |
          target/debug/*.exe
          target/release/*.exe
          
    - name: Installer Artifact
      uses: actions/upload-artifact@v3
      with:
        name: chrome_valet-${{ env.CV_VERSION }}-x86_64.msi
        path: |
          target/wix/chrome_valet-${{ env.CV_VERSION }}-x86_64.msi

    - if: github.event.inputs.is_release == 'true'
      name: Dispatch scp deploy
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.CV_WORKFLOW_TOKEN }}
        script: |
          github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploymsi.yml',
            ref: 'main',
            inputs: {
              cv_version: '${{ env.CV_VERSION }}'
            }
          })
